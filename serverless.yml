service: booksapi

plugins:
  - serverless-offline

custom:
  tableName: 'books-table-${self:provider.stage}'

package:
  include:
    - api/**

provider:
  name: aws
  runtime: nodejs12.x
  profile: LevNakon
  stage: dev
  region: us-east-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["BooksDynamoDBTable", "Arn" ] }
  environment:
    BOOKS_TABLE: ${self:custom.tableName}

functions:
  app:
    handler: app.handler
    events:
      - http: 
         path: /
         method: ANY
         cors: true 
      - http:
         path: /{param+}
         method: ANY
         cors: true

resources:
  Resources:
    BooksDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: uuid
            AttributeType: S
        KeySchema:
          -
            AttributeName: uuid
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}